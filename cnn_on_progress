#for cnn,
#dim(input) <- 100*6*1

library(tfestimators)

# return an input_fn for a given subset of data
mtcars_input_fn <- function(data, num_epochs = 1) {
  input_fn(data, 
           features = c("disp", "cyl"), 
           response = "mpg",
           batch_size = 32,
           num_epochs = num_epochs)
}

cols <- feature_columns( 
  column_numeric("disp", "cyl")
)

dnn_classifier(hidden_units, feature_columns, model_dir = NULL,n_classes = 2L, weight_column = NULL, label_vocabulary = NULL,optimizer = "Adagrad", activation_fn = "relu", dropout = NULL,input_layer_partitioner = NULL, config = NULL)

#or 
#dnn_linear_combined_classifier(model_dir = NULL,linear_feature_columns = NULL, linear_optimizer = "Ftrl",dnn_feature_columns = NULL, dnn_optimizer = "Adagrad", dnn_hidden_units = NULL, dnn_activation_fn = "relu",dnn_dropout = NULL, n_classes = 2L, weight_column = NULL,label_vocabulary = NULL, input_layer_partitioner = NULL,config = NULL)

#https://tensorflow.rstudio.com/tfestimators/reference/dnn_estimators.html

indices <- sample(1:nrow(mtcars), size = 0.80 * nrow(mtcars))
train <- mtcars[indices, ]
test  <- mtcars[-indices, ]

# train the model
model %>% train(mtcars_input_fn(train, num_epochs = 10))


model %>% evaluate(mtcars_input_fn(test))

obs <- mtcars[1:3, ]
model %>% predict(mtcars_input_fn(obs))




